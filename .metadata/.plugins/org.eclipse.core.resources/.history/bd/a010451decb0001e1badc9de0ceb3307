package com.estock.amazon;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.DeleteObjectRequest;
import com.amazonaws.services.s3.model.ListObjectsV2Request;
import com.amazonaws.services.s3.model.ListObjectsV2Result;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;

@Component
public class AmazonS3Util {

	@Value("${accessKey}")
	String accessKey;
	
	@Value("${secretKey}")
	String secretKey;
	
	@Value("${bucketName}")
	String bucketName;
	
	@Value("${dataFileName}")
	String dataFileName;
	
	@Value("${inboundS3FilePath}")
	String inboundS3FilePath;
	
	@Value("${outboundS3FilePath}")
	String outboundS3FilePath;
	
	@Value("${localFilePath}")
	String localFilePath;
	
	@Value("${downloadFilePath}")
	String downloadFilePath;
	
	public String downloadFileFromS3() {
		String response = null;
        BasicAWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secretKey);

        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))
                .build();

        try {
            S3Object s3Object = s3Client.getObject(bucketName, inboundS3FilePath + dataFileName);
            File outputFile = new File(downloadFilePath + dataFileName);
            FileOutputStream outputStream = new FileOutputStream(outputFile);

            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = s3Object.getObjectContent().read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }

            outputStream.close();
            s3Object.close();
            response = "File downloaded successfully to: " + downloadFilePath + dataFileName;
        } catch (IOException e) {
        	response = e.getMessage();
            e.printStackTrace();
        }
        
        return response;
	}

	public String uploadFileToS3(String fileName) {
		String response = null;
		BasicAWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secretKey);

        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))
                .build();

        try {
            File file = new File(localFilePath + fileName);
            s3Client.putObject(new PutObjectRequest(bucketName, outboundS3FilePath + fileName, file));
            response = "File [" + fileName + "] uploaded successfully to S3 bucket [" + bucketName + "/" + outboundS3FilePath + "]";
        } catch (Exception e) {
        	response = e.getMessage();
            e.printStackTrace();
        }
        
		return response;
	}
	
	public String readFromS3File(String fileName) {
		String response = null;
		BasicAWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secretKey);

        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))
                .build();

        try {
            S3Object s3Object = s3Client.getObject(bucketName, inboundS3FilePath + fileName);
            S3ObjectInputStream inputStream = s3Object.getObjectContent();

            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line); // Process the line here
            }

            reader.close();
            inputStream.close();
            response = "File [" + fileName + "] has been read successfully";
        } catch (IOException e) {
        	response = e.getMessage();
            e.printStackTrace();
        }
        
		return response;
	}

	public String writeToS3File(String fileName, String fileContent) {
		String response = null;
		BasicAWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secretKey);

        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))
                .build();

        InputStream inputStream = new ByteArrayInputStream(fileContent.getBytes(StandardCharsets.UTF_8));
        ObjectMetadata metadata = new ObjectMetadata();
        metadata.setContentLength(fileContent.getBytes(StandardCharsets.UTF_8).length);

        try {
            s3Client.putObject(bucketName, outboundS3FilePath + fileName, inputStream, metadata);
            response = "File [" + fileName + "] written successfully to S3 bucket [" + bucketName + "/" + outboundS3FilePath + "]";
        } catch (Exception e) {
        	response = e.getMessage();
            e.printStackTrace();
        }
        
		return response;
	}

	public List<String> clearS3Folder(String folderName) {
		List<String> response = new ArrayList<>();
		BasicAWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secretKey);

        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))
                .build();

        ListObjectsV2Request listObjectsRequest = new ListObjectsV2Request()
                .withBucketName(bucketName)
                .withPrefix(folderName + "/");

        ListObjectsV2Result objectListing;

        do {
            objectListing = s3Client.listObjectsV2(listObjectsRequest);

            for (com.amazonaws.services.s3.model.S3ObjectSummary objectSummary : objectListing.getObjectSummaries()) {
            	if(!objectSummary.getKey().endsWith("/")) {  //This logic is to skip folder from deletion
	                s3Client.deleteObject(new DeleteObjectRequest(bucketName, objectSummary.getKey()));
	                response.add("Deleted: " + objectSummary.getKey());
            	}
            }

            listObjectsRequest.setContinuationToken(objectListing.getNextContinuationToken());
        } while (objectListing.isTruncated());

		return response;
	}
	
	public String s3Folder(String folderName, String action) {
		String response = null;
		
		BasicAWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secretKey);

        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))
                .build();

        if(action.equals("CREATE")) {
	        ObjectMetadata metadata = new ObjectMetadata();
	        metadata.setContentLength(0); // Empty content
	        File file = new File(folderName + "/");
	        
	        // Upload an empty object with the folder name as the key
	        //s3Client.putObject(new PutObjectRequest(bucketName, folderName + "/", null, metadata));
            s3Client.putObject(new PutObjectRequest(bucketName, folderName + "/", file));
	        response = "Folder [" + folderName + "] created successfully in S3 bucket [" + bucketName + "]";
        } else if(action.equals("REMOVE")) {
        	// Delete the empty object "folder"
            s3Client.deleteObject(bucketName, folderName + "/");
	        response = "Folder [" + folderName + "] removed successfully from S3 bucket [" + bucketName + "]";
        }
        
		return response;
	}
	
}
