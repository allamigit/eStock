package com.estock.batch;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.ItemStreamException;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.beans.factory.annotation.Value;

import com.estock.model.DataFile;

public class OrdersReader extends FlatFileItemReader<DataFile> {

	@Value("${localFilePath}")
	private String localFilePath;

	private BufferedReader bufferedReader;
	
//	public OrdersReader() {
//		Path filePath = Paths.get(this.localFilePath, "eStock_Orders.csv");
//		//setResource(new ClassPathResource("c:\\eStock\\eStock_Orders.csv"));
//		setResource(new ClassPathResource(filePath.toString()));
//        setLineMapper(new DefaultLineMapper<DataFile>() {{
//            setLineTokenizer(new DelimitedLineTokenizer() {{
//                setNames(new String[]{"orderId", "orderCustomer", "itemCode", "itemSoldQTY"});
//            }});
//            setFieldSetMapper(new BeanWrapperFieldSetMapper<DataFile>() {{
//                setTargetType(DataFile.class);
//            }});
//        }});
//	}
	
    @Override
    public void open(ExecutionContext executionContext) throws ItemStreamException {
        try {
            // Initialize the reader (e.g., open file, database connection)
        	Path filePath = Paths.get(this.localFilePath, "eStock_Orders.csv");
            setBufferedReader(new BufferedReader(new FileReader(filePath.toString())));
        } catch (IOException e) {
            throw new ItemStreamException("Failed to initialize the reader", e);
        }
    }

	public BufferedReader getBufferedReader() {
		return bufferedReader;
	}

	public void setBufferedReader(BufferedReader bufferedReader) {
		this.bufferedReader = bufferedReader;
	}
    
}
