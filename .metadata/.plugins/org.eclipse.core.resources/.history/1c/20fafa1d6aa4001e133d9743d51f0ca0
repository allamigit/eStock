package com.estock.controller;

import java.io.IOException;
import java.util.List;

import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.batch.core.*;
import org.springframework.batch.core.launch.JobLauncher;

import com.estock.batch.BatchConfiguration;
import com.estock.model.OrderDetailsResponse;
import com.estock.service.OrdersService;

@RestController
@RequestMapping(value = "orders")
public class OrdersController {

	@Autowired
	private OrdersService ordersService;

	@Autowired
	private BatchConfiguration batchConfiguration;
	
	public OrdersController(OrdersService ordersService, BatchConfiguration batchConfiguration) {
		super();
		this.ordersService = ordersService;
		this.batchConfiguration = batchConfiguration;
	}
	
	@GetMapping(value = "orderDetails")
	public OrderDetailsResponse getOrderDetails(@RequestParam(name = "order-id") Long orderId) {		
		return ordersService.getOrderDetails(orderId);
	}
	
	@GetMapping(value = "local/readFromFile", consumes = {"multipart/form-data"})
	public List<OrderDetailsResponse> readOrdersDataFile(@RequestPart(name = "file-name") MultipartFile fileName) throws NumberFormatException, IOException {
		List<String> fileLines = ordersService.readOrdersDataFile(fileName);
		List<OrderDetailsResponse> ordersList = ordersService.processOrdersDataFile(fileLines);
		ordersService.writeOrdersDataFile(ordersList);
		return ordersList;
	}
	
	@GetMapping(value = "batch/readFromFile")
	public String readOrdersDataCSVFile() {
       try {
	        JobParameters jobParameters = new JobParametersBuilder()
	                .addLong("time", System.currentTimeMillis())
	                .toJobParameters();
	
	        JobExecution jobExecution = jobLauncher.run(myJob, jobParameters);
	        
	        return "Batch job started with status: " + jobExecution.getStatus();
	    } catch (Exception e) {
	        return "Error starting batch job: " + e.getMessage();
	    }
     
	}

}
