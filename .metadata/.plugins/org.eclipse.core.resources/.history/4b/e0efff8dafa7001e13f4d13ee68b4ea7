package com.estock.batch;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

import com.estock.model.Orders;
import com.estock.model.Stock;
import com.estock.repository.OrdersRepository;
import com.estock.repository.StockRepository;

public class OrdersWriter implements ItemWriter<Orders> {

	@Autowired
	private StockRepository stockRepository;

	@Autowired
	private OrdersRepository ordersRepository;

	@Value("${localFilePath}")
	private String localFilePath;

	@SuppressWarnings("unchecked")
	@Override
    public void write(List<? extends Orders> items) throws Exception {
        // Write processed data to the database
		if (items != null) {
            for (Orders item : items) {
                ordersRepository.save(item);
                
                if(!item.getOrderStatus().contains("FAIL")) {
	                Stock stock = stockRepository.getItemDetails(item.getItemCode());
	                stock.setItemStockQTY(stock.getItemStockQTY() - item.getItemSoldQTY());
	                stockRepository.save(stock);
                }
            }
        	writeOrdersDataFile((List<Orders>) items);
        } else {
            throw new NullPointerException("Orders list is null");
        }
    	
    	
    }
    
    
	private void writeOrdersDataFile(List<Orders> ordersList) {
		List<Orders> ordersCompleteList = ordersList.stream()
				.filter(o -> o.getOrderStatus().endsWith("COMPLETE"))
				.collect(Collectors.toList());
		
		try {
			Path filePath = Paths.get(this.localFilePath, "eStock_Orders_Complete.csv");
			FileWriter writeLine = new FileWriter(filePath.toString());
			writeLine.write("orderId,orderCustomer,itemCode,itemSoldQTY,orderStatus\n");
			for(int i=0; i<ordersCompleteList.size(); i++) {
				String strLine = ordersCompleteList.get(i).getOrderId().toString() + "," +
						ordersCompleteList.get(i).getOrderCustomer() + "," +
						ordersCompleteList.get(i).getItemCode().toString() + "," +
						ordersCompleteList.get(i).getItemSoldQTY().toString() + "," +
						ordersCompleteList.get(i).getOrderStatus();
				writeLine.write(strLine);
				if(i < ordersCompleteList.size()-1) writeLine.write("\n");
			}
			writeLine.close();
	    } catch (IOException e) {
	      e.printStackTrace();
	    }
	
		List<Orders> ordersFailList = ordersList.stream()
				.filter(o -> o.getOrderStatus().endsWith("FAIL"))
				.collect(Collectors.toList());

		try {
			Path filePath = Paths.get(this.localFilePath, "eStock_Orders_Fail.csv");
			FileWriter writeLine = new FileWriter(filePath.toString());
			writeLine.write("orderId,orderCustomer,itemCode,itemSoldQTY,orderStatus,orderComment\n");
			for(int i=0; i<ordersFailList.size(); i++) {
				String strLine = ordersFailList.get(i).getOrderId().toString() + "," +
						ordersFailList.get(i).getOrderCustomer() + "," +
						ordersFailList.get(i).getItemCode().toString() + "," +
						ordersFailList.get(i).getItemSoldQTY().toString() + "," +
						ordersFailList.get(i).getOrderStatus() + "," +
						ordersFailList.get(i).getOrderComment();
				writeLine.write(strLine);
				if(i < ordersFailList.size()-1) writeLine.write("\n");
			}
			writeLine.close();
	    } catch (IOException e) {
	      e.printStackTrace();
	    }
		
	}
    
}
