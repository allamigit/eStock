package com.estock.batch;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.annotation.BeforeStep;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;

import com.estock.model.DataFile;
import com.estock.model.Orders;

@Component
public class BatchConfiguration {

    @Autowired
    private JobBuilderFactory jobBuilderFactory;

    @Autowired
    private StepBuilderFactory stepBuilderFactory;

	@Value("${batchChunkSize}")
	private Integer batchChunkSize;

	@SuppressWarnings("unused")
	private String dataSource;
	
	@Bean
    public OrdersReader ordersReader() {
        return new OrdersReader();
    }
	
	@Bean
    public OrdersProcessor ordersProcessor() {
        return new OrdersProcessor();
    }
	
	@Bean
    public OrdersWriter ordersWriter() {
        return new OrdersWriter();
    }

	@Bean
    public BatchJobParameterReader batchJobParameterReader() {
        return new BatchJobParameterReader();
    }
	
	@Bean
    public Job ordersDataJob(Step ordersDataStep) {
        return jobBuilderFactory.get("ordersDataJob")
                .start(ordersDataStep)
                .build();
    }

//	@BeforeStep
//	public void beforeStep(StepExecution stepExecution) {
//		JobParameters jobParameters = stepExecution.getJobParameters();
//		dataSource = jobParameters.getString("source");
//		System.out.println("source="+dataSource);
//	}
//
	@Bean
    public Step ordersDataStep(OrdersReader reader, OrdersProcessor processor, OrdersWriter writer) {
        return stepBuilderFactory.get("ordersDataStep")
                .<DataFile, Orders> chunk(batchChunkSize)
                .reader(reader.readDataFile())
                .processor(processor)
                .writer(writer)
                .build();
    }
    
}

class BatchJobParameterReader {
    public void readJobParameters(StepExecution stepExecution) {
        // Access JobParameters from JobExecution
        JobParameters jobParameters = stepExecution.getJobParameters();

        // Use jobParameters as needed
        System.out.println("Job Parameters: " + jobParameters.toString());
    }
}