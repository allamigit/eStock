package com.estock.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.S3Object;

import com.estock.model.OrderDetailsResponse;
import com.estock.model.Orders;
import com.estock.service.OrdersService;

@RestController
@RequestMapping(value = "orders")
public class OrdersController {

	@Autowired
	private OrdersService ordersService;

	@Autowired
    private JobLauncher jobLauncher;

    @Autowired
    private Job ordersDataJob;

	public OrdersController(OrdersService ordersService,
			JobLauncher jobLauncher,
			Job ordersDataJob) {
		super();
		this.ordersService = ordersService;
		this.jobLauncher = jobLauncher;
		this.ordersDataJob = ordersDataJob;
	}
	
	@GetMapping(value = "orderDetails")
	public OrderDetailsResponse getOrderDetails(@RequestParam(name = "order-id") Long orderId) {		
		return ordersService.getOrderDetails(orderId);
	}
	
	@PostMapping(value = "local/readFromFile", consumes = {"multipart/form-data"})
	public List<Orders> readOrdersDataFile(@RequestPart(name = "file-name") MultipartFile fileName) throws NumberFormatException, IOException {
		List<String> fileLines = ordersService.readOrdersDataFile(fileName);
		List<Orders> ordersList = ordersService.processOrdersDataFile(fileLines);
		ordersService.generateOrdersDataFile(ordersList);
		return ordersList;
	}
	
	@PostMapping(value = "batch/readFromFile", consumes = {"multipart/form-data"})
	public String readOrdersDataCSVFile(@RequestPart(name = "file-name") MultipartFile fileName) throws NumberFormatException, IOException {
       try {
	        JobParameters jobParameters = new JobParametersBuilder()
	                .addLong("time", System.currentTimeMillis())
	                .toJobParameters();
	
	        JobExecution jobExecution = jobLauncher.run(ordersDataJob, jobParameters);
	        
	        return "Batch job started with status: " + jobExecution.getStatus();
	    } catch (Exception e) {
	        return "Error starting batch job: " + e.getMessage();
	    }    
	}

	@PostMapping(value = "s3/download")
	public void downloadS3CSVFile() throws NumberFormatException, IOException {
		String accessKey = "AKIA6OGQRCAJ6REG7R4B";
        String secretKey = "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";
        String bucketName = "e-stock-data";
        String s3FilePath = "Inbound/eStock_Orders.csv";
        String downloadFilePath = "c:/eStock/S3/eStock_Orders.csv";

        BasicAWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secretKey);

        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))
                .build();

        try {
            S3Object s3Object = s3Client.getObject(bucketName, s3FilePath);
            File outputFile = new File(downloadFilePath);
            FileOutputStream outputStream = new FileOutputStream(outputFile);

            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = s3Object.getObjectContent().read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }

            outputStream.close();
            s3Object.close();
            System.out.println("File downloaded successfully to: " + downloadFilePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
	}
	
}
